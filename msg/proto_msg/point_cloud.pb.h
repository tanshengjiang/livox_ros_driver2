// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point_cloud.proto

#ifndef PROTOBUF_point_5fcloud_2eproto__INCLUDED
#define PROTOBUF_point_5fcloud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)

namespace SensorMsg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_point_5fcloud_2eproto();
void protobuf_AssignDesc_point_5fcloud_2eproto();
void protobuf_ShutdownFile_point_5fcloud_2eproto();

class PointCloudXYZIT;
class PointXYZIT;

// ===================================================================

class PointXYZIT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SensorMsg.PointXYZIT) */ {
 public:
  PointXYZIT();
  virtual ~PointXYZIT();

  PointXYZIT(const PointXYZIT& from);

  inline PointXYZIT& operator=(const PointXYZIT& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointXYZIT& default_instance();

  void Swap(PointXYZIT* other);

  // implements Message ----------------------------------------------

  inline PointXYZIT* New() const { return New(NULL); }

  PointXYZIT* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointXYZIT& from);
  void MergeFrom(const PointXYZIT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointXYZIT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional uint32 intensity = 4;
  void clear_intensity();
  static const int kIntensityFieldNumber = 4;
  ::google::protobuf::uint32 intensity() const;
  void set_intensity(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SensorMsg.PointXYZIT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 intensity_;
  ::google::protobuf::uint64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_point_5fcloud_2eproto();
  friend void protobuf_AssignDesc_point_5fcloud_2eproto();
  friend void protobuf_ShutdownFile_point_5fcloud_2eproto();

  void InitAsDefaultInstance();
  static PointXYZIT* default_instance_;
};
// -------------------------------------------------------------------

class PointCloudXYZIT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SensorMsg.PointCloudXYZIT) */ {
 public:
  PointCloudXYZIT();
  virtual ~PointCloudXYZIT();

  PointCloudXYZIT(const PointCloudXYZIT& from);

  inline PointCloudXYZIT& operator=(const PointCloudXYZIT& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudXYZIT& default_instance();

  void Swap(PointCloudXYZIT* other);

  // implements Message ----------------------------------------------

  inline PointCloudXYZIT* New() const { return New(NULL); }

  PointCloudXYZIT* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloudXYZIT& from);
  void MergeFrom(const PointCloudXYZIT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloudXYZIT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommonMsg.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::CommonMsg::Header& header() const;
  ::CommonMsg::Header* mutable_header();
  ::CommonMsg::Header* release_header();
  void set_allocated_header(::CommonMsg::Header* header);

  // optional int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional bool is_dense = 4;
  void clear_is_dense();
  static const int kIsDenseFieldNumber = 4;
  bool is_dense() const;
  void set_is_dense(bool value);

  // repeated .SensorMsg.PointXYZIT points = 5;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 5;
  const ::SensorMsg::PointXYZIT& points(int index) const;
  ::SensorMsg::PointXYZIT* mutable_points(int index);
  ::SensorMsg::PointXYZIT* add_points();
  ::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZIT >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZIT >&
      points() const;

  // @@protoc_insertion_point(class_scope:SensorMsg.PointCloudXYZIT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::CommonMsg::Header* header_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZIT > points_;
  bool is_dense_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_point_5fcloud_2eproto();
  friend void protobuf_AssignDesc_point_5fcloud_2eproto();
  friend void protobuf_ShutdownFile_point_5fcloud_2eproto();

  void InitAsDefaultInstance();
  static PointCloudXYZIT* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PointXYZIT

// optional float x = 1;
inline void PointXYZIT::clear_x() {
  x_ = 0;
}
inline float PointXYZIT::x() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZIT.x)
  return x_;
}
inline void PointXYZIT::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZIT.x)
}

// optional float y = 2;
inline void PointXYZIT::clear_y() {
  y_ = 0;
}
inline float PointXYZIT::y() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZIT.y)
  return y_;
}
inline void PointXYZIT::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZIT.y)
}

// optional float z = 3;
inline void PointXYZIT::clear_z() {
  z_ = 0;
}
inline float PointXYZIT::z() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZIT.z)
  return z_;
}
inline void PointXYZIT::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZIT.z)
}

// optional uint32 intensity = 4;
inline void PointXYZIT::clear_intensity() {
  intensity_ = 0u;
}
inline ::google::protobuf::uint32 PointXYZIT::intensity() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZIT.intensity)
  return intensity_;
}
inline void PointXYZIT::set_intensity(::google::protobuf::uint32 value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZIT.intensity)
}

// optional uint64 timestamp = 5;
inline void PointXYZIT::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PointXYZIT::timestamp() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZIT.timestamp)
  return timestamp_;
}
inline void PointXYZIT::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZIT.timestamp)
}

// -------------------------------------------------------------------

// PointCloudXYZIT

// optional .CommonMsg.Header header = 1;
inline bool PointCloudXYZIT::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PointCloudXYZIT::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::CommonMsg::Header& PointCloudXYZIT::header() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZIT.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CommonMsg::Header* PointCloudXYZIT::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::CommonMsg::Header;
  }
  // @@protoc_insertion_point(field_mutable:SensorMsg.PointCloudXYZIT.header)
  return header_;
}
inline ::CommonMsg::Header* PointCloudXYZIT::release_header() {
  // @@protoc_insertion_point(field_release:SensorMsg.PointCloudXYZIT.header)
  
  ::CommonMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PointCloudXYZIT::set_allocated_header(::CommonMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMsg.PointCloudXYZIT.header)
}

// optional int32 width = 2;
inline void PointCloudXYZIT::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 PointCloudXYZIT::width() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZIT.width)
  return width_;
}
inline void PointCloudXYZIT::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointCloudXYZIT.width)
}

// optional int32 height = 3;
inline void PointCloudXYZIT::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 PointCloudXYZIT::height() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZIT.height)
  return height_;
}
inline void PointCloudXYZIT::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointCloudXYZIT.height)
}

// optional bool is_dense = 4;
inline void PointCloudXYZIT::clear_is_dense() {
  is_dense_ = false;
}
inline bool PointCloudXYZIT::is_dense() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZIT.is_dense)
  return is_dense_;
}
inline void PointCloudXYZIT::set_is_dense(bool value) {
  
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointCloudXYZIT.is_dense)
}

// repeated .SensorMsg.PointXYZIT points = 5;
inline int PointCloudXYZIT::points_size() const {
  return points_.size();
}
inline void PointCloudXYZIT::clear_points() {
  points_.Clear();
}
inline const ::SensorMsg::PointXYZIT& PointCloudXYZIT::points(int index) const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZIT.points)
  return points_.Get(index);
}
inline ::SensorMsg::PointXYZIT* PointCloudXYZIT::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:SensorMsg.PointCloudXYZIT.points)
  return points_.Mutable(index);
}
inline ::SensorMsg::PointXYZIT* PointCloudXYZIT::add_points() {
  // @@protoc_insertion_point(field_add:SensorMsg.PointCloudXYZIT.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZIT >*
PointCloudXYZIT::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:SensorMsg.PointCloudXYZIT.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZIT >&
PointCloudXYZIT::points() const {
  // @@protoc_insertion_point(field_list:SensorMsg.PointCloudXYZIT.points)
  return points_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_point_5fcloud_2eproto__INCLUDED
